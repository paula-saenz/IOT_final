from cryptography.fernet import Fernet

# Clave de cifrado proporcionada
cipher_key = b"Sputu7XfJLD5nauDMhMWBfuesCd0kBl5lQqyvP8whnY="
cipher = Fernet(cipher_key)

# Datos cifrados (ejemplo)
encrypted_geolocalizacion = b"gAAAAABn7DjrxNQ-ZzwO65auqym6k2TDyip3R2EThrKmzuvPiGEeTZZqfdd_cvHKOMykiZbWAQ9YegLORkLwgAoEByY7VEFYjNiZ7-h1frqZA6BacQ4kbmSmAsgIEYFWZFmQUok2aVGk"
encrypted_imagen = b"gAAAAABn7Djrsnnb_QYufXt7i73bE44JNnDI8FNdl5K9rXQiix5f-vRMfukSt7k8zLafOnweKzCz4zTj-3zI1ulY7vvPrkFvwjf3cxOBOAYTSnNDEvNPgRO6Hsenhus5yw4iS_Mgt6dOpGfTDTbF4Aj5QHwG6xYTQPriz7UfL_M8wOZAXaf3rjor-iR5c-SGK5F2VsAlhVMNaw98dDJhuE1hcKQb7odb4xjO3nQsQFP0JPF83x0ZRFkSglOuSohS850g7lJzVpnQsC43_adOWxt3Nt-U6P9g6ZvpxQvEztzTe2UQcx6Kg8isbiXmgCRL-zm1KiFj8wrAF_MBAyslqRw0P7XzmthiDZBf1kjjW4ATtWcfPXA6CTWVotKlZ-qGeOeT9Op0VqtGIGb4RqcK342EnqSgaLxNV2lFsGOJ_CpBey1dleaisbKSzudqGRGwdw59g5raDUaUBO0YXrDz0L2UlKcNAHEl6_FrR6lnnW2KzNdwkhcilv6ruHJGzFjHb7eY8-cpWBIwSZK9pYHDCIaCyBAo4Xl_4B2roXtHahhllCKEtgLCo-q6gk1J3oTKynbUNOrijNHSVbpB92fRXKRFM7FttvW5o2rpCnNdg0LOU5HOSLK6abgRIBl9_b7bacuKNQfcXeV4OaGYc2Q8t1xnrJ_rGP3DzixiSK7OoEsrlYD_iSxpjOZk6-94poXpxiIrqyyl0ac5xTe2GjrU8YDLaDfjCd28ViL2NKdFiyCHmA0pc53uM-OitxPHQZrumhRqA4-9C3Z74HzXef75N9PXeQzHhRzEK9-OkH4fOS3gT8ftgsT2SULZpZvX1z0oIiAAVZCy9UwbFmGy_QRaQ_xg-LuKc_9El3yTwGgLd1eTSLsiSAuYWC6rs3UvJv1idcuI3WV2sItmHmGtVYyglBbAO-L__Q_BToHc5m9BTOygqC9dtpLwgm0IIR4Rlfw2m9BzT7d2I-Z7YbXrfC4b5wGf-t_aRMC17MWeh1MhHiE3FYIfm_EDhfuG9B6GCtlLgbXfaURIchmAopJvSlQEFvWNDo90CZ-kuiz4qQwzDs5Nj2SGgdzsNWXBAYsGawuS4dmnuesw822iiINlQXorloKi_KtPMl_tXxb2xrc7TB9FyqeMvPzhbQS5PyobMpZaREwl4i8Kfj4qQqRYNY8Dhqg-0PgFyC4broilulxDnR2yo9L6hT0obVQjaF8klXiWa0IJbQOJcGC6dyu46QpknHribzlv9tl4ckUEwWvxKYIpG5sTGG8V5IjmGVAgN-qIsqWHGPIcvQVqVcDm9J8zdI1lhGbfAy2v0jttxMLI-uvrd3SbNCu-7T2_ZUgLgtBOCT3X96tVhZ_aQkbnpC_p_Z_KsHcxSWv6xdxymxt9zt0TWLIFQHUO57TtLYOGNH7p24dPjlJEKRK19jo6Jj3YSnft-DM0kDyioxrH3Dw8c7zWoIxmhgOj6AqaHAiDfJgwRbM0lvJjcWCTyPS7abNJaIG2D_f0CYuUoYsw-UNdne7kSiPfdNjEqDpdIMCqiazzf2gzroXpDOdiLI85kRcYL5jEVDqUvHyJJaZ3JNszsMAIxI2wlRr2y4IBviZHoU3lVGCBaM3G0alERqErijK1skzQvtudpkyn_63PtncwU--htpyKaFuOx-yU_eZPrixXtp69nht9dJwx8qU21-l3mkx8YBgIUKN5lW7MxEzGp-3SUwpmkoEhECTGAIB3CsYMX_oVB-XQ5rW2atw25Wbq7ooQSmXivdTBZfp3h4-Wz_mN7OPyi6vdKVGiSLky5YyZPN5xQZTM6oeCC_6gyCY0I5JR80pN_eakW9h7t97YeSsKTnGcfQwAMjZUpwxAs-gcxAIVfJDRn4aDLno9hEK8esPql4APvXO2H9LZNpHTJjxQo4d0Sn-kvmH915jpPOVrbPS5gQPlAWOOitsUNt9jPp1awwzRSxDyW4pUmqoSC1ZO8GywN1Tnfmkoln19OLMIsbnuJ5Y0kC0d3T-Bsqiu9Obx5WXrVA9CosUa4yFbKCYwuCZE-ne6lHoQRZQFdn-owVU44o6C890-c_kZJFEMO6ubqqlycck1OWvQcWwKjioMmJpUPiIsdnMPn3xPtaG6H5nnRtPMNy0dQbDeAnmRjYpZl9Aox5JMtXd4mNKXOr0eWLZAjdACr4KANm_Xs8YTmCrmZDqClBJW5f1DB25El8d204VfFBQTMePpIAcdH3be73aiip2CCjXiyn_LP1Hj_2EiQLj9e3WmkPQuHl-hYWGCI9nTmd5Ytudkx7ikLX_ZGXTFE_-vT9Pqmn-RAW38jNOBWaTKWWJ-qJTZW1-PivUkAXe5LJzAozOzJ7eTqFMQkrV8j0PCI5ZDUstlZawlcwBZn6zN3_2ORBOL0ql3DsAo8x_-G73XrrNt2hnFtWgx-1CyIav9lWfcy2lz5QRGk-dYIwdAEYXRQPe7F41lgIJLKbfbpWBTK_yYZoe9sN1spDRAZ-YklV-Equcm5Bt37R5lIXeYIEhsldd3mhd0llJtCostWLJtV5ko5oX6mm6_tglD3aV0K9mzM0ALDVim95b4EmxPYgNFw4ovnQ3UWfdzTVGcZR_cbl-bDv3BkvQSc_kWO8ZVexPht4kIGvBCjjILk5bQQCtUnTFd7oQHY8Xf1CcUdn7PsPDOlZ5NI7dZcx5PP40s6zmEaJlL-FLGNhG1ny9iqeaURhiojndiRq2CzicuLcKDrMQmvFDwZSyWhvrvKGnGFABrtukFkjMrjW5o3EhDigxy-Cn4LJFtBYbtgX4GqQWktL1z8PjI2am476Dc_VjD4raM0FrTDlfT67tbfdSd-qZ1zRNdRnlnu-AOyXz0KPpwy5SlqR_5HhGWvGai5OCtprbBsSLO5DfXgTBJfFmLq2Ddn_tbHt3xCcl7rtSaNxRSIiyiep5C5CMERGVuZJkCre3o0E5ZmL9iS7BeWkm_EH2Vp-8oDPA6L3l01cPXVEyczoBLoDMmCwY05ojDe0kKUApJncVZfj3Jzu0NgV9CMu4JBuEaTwFTU4cIhpQ19MSu6ORxCFMtQ3CT2NcRGjrv9N3YHTILMT62oZn2NhB7GvD08awc9FRr3pB8TamyZXnJ5ln7mjRwtaR5q8po4sv7NmKfjblnE-2E1ltfX2p6nPF6kF5BHsdq5Y5tcJ7GHvRTx594-Yj04JX4pV1XmrPCocfqaEhzxkEs6-lQjeaojkxfXzOvlXV8tZttcm3GMKln1Xd70P0Wcz00S_168Y-F21Dgxs_wd3SVmdpQnH69ApByCHMNgSsY0f-UQxDdyWswLfWN30WQutHklLuMPpl2dVSzyIG6ThpspsyX37JpAoIwOFlF_4zf2fkpFaMYApHaWYi7CepTe-RMOY8v8rEBnTQ1jKH99-rPLGIFZWAo0oU0xJOsBcYXadzDgD2DQBFiRLyRw-haEn_6642tbGIZ5eBv0EiS2pfb90i5cimaq7yWjBqyf_DdcmCIUp8EK7ngkvDaaRoLGykS1-UxjlwwMl6URxw9J4DkQjIPWGMiKH3O9cVayKVMGMx0Iyx-5To-hjIgR0uGC4I5R5uBUPL68JzyHyvV62W_lcQu9Oi_9R_suO_MSFZHY5CaGZZhFcEGFk2Dxq1iqsVYfDFIQAjM-X5GOtOS4sIXVsK87lUqJ7sM79JZG6h6Zg7j2XEWrhOUFHFcfwS4ohGQBBnMcHinhiFYohwyMnPoybsPP9hca8233mCY-4RhMhK4jbF3gLScMBv7rNXp5hhkGriLWD17LXuy9vQC6qgXRPmsH5DrfKtM3k8yAk_5YOEmPANU0yxxjaBhDO1s6JUYMBmiuwV7Kjw_NhT2sFNvER39LS_7IVGyApmVQJ89Nf7l8thpTXppQWWwYOaJuvd4Kb0qphVTlbYEXlI9SnJzZzehjmx36fA_FeAmjMVjT0qw2b6zyhZgud02d8brPZCV9rsBcSOwqdZbs67GTwcT-d73sY4MnAZAjmY3qZZnztT5CV4PP1aaFUCjhiXf-pb2OQAzzbDVD4G31Vzv3TvYArBCyuOG5PsttFNJuH7JjnIrKAbdAVDiHb83fphVB7nxqMGp8cYjzL5jLcsm6gPepfezb9QDEa_9H-Qdn9TOfnw25EMim23x77X0VoplbTeJ9fKVwRTTCkc6Q5hor30kpIlylI_QC-B0H3mv9zNdv268RSXdwcKSPuacqqwyrLPqAWCV-YOcvaZJHhGBFqZ04xm12ko-UibI8U2tniCIQzucFCbSQsqQiFlAibYTnmnzYJWIdVTMLbT-nMCIklOciQlL-BwFhGsybEsK9CUz07tuPlnv-0Jd1gU-smTM5jhoYgoWA1d_tF9RxhG4GRqnWlH64PvsM6UjjGfhnB9it9EPn9diVehrjwh9WGCriorw4rIg9CSWTpSfdX7iWCn2rsx7pdj4MSmTdYw1wWsZZHKay1Njd15NHuuhC_EaHKf4LutbJcfy3G0TfWjyYL5fW-MLOGurVGtliHUxSAGzdpm7o742-xOKPf9qM2kiwMOOFg7jWrkXBw-Y5uYCLM3E1oZdSallL5_vY8JTkJ247-_k_1HElOG3Zyxnt5GpxMq1cDw4cO3WWIru_Z7u5Kse8_fEnaeP0LGuLgVylQQ4PEI_3hC2DSLNSA2FtBPI-GM7mPvwl0O9oHGk_EM_qg3speDhl1dwBOIzp4O8YaLdx69Repc-MgVJPHMudhsRXvGiIpg1k0wbSaj5kKvIgNCHlPv8uUNM1QN0I7GIz3w6I-782fK_GvOgD499uOr77vd3tKkck6fLm6DWnrFwTT_3nJwbALhcA_YKwVcy_CTpQL_8IM7Q0kMMZtUdAnRuGS5fIZWF0mxBqm9WL-X7__EtvN7DgX1lDaQzh-UwneakQnEH6pFtoc1SHChKBwwN7jtdhQgYKU4RJMDIJK5x7jHSNxFlybaqCha9rP7mDlidQFOQLGNtM-kJ_0Tea_IirFwHhvgP7t5uRyiWDzVEzjc2ZAR4rODLYhDYh1mNSCo6Cc8ZvKFS2FC1utiPkCO5RolcEJRbhbceLi2cxRoT9wNAmoPJAIJ5rq6hTqxwDT3hhZX1prYewN0LlYAId2-i9R6VbfgqT0xanyfY8orf2lbZBjBSPi2_KGd_bsEaVTQ11xI-NAh25jL9KIp8NVTpUSNvbH0hklEvvGF_iDezbtR1PDaBb0HHOU0EXoCrdN_mF-dV3rYqeNpSQ_SWqME7_2wOnvxcy1M3RyrbEP0-_qWf_U4tFz_eFxRZTsgrA0sxVFn4e-H04sLy6EgDg9MfxBrbiL-GbmWvffWonavn8KRF27vSpdIT7v6BjQGux9uIsw40UlvP7lUqLApy_Pw7k5p4SUUJEs4Nya_MsuRrXuTmS5wNdByFs9SFCu0GnSqY_Jbs5z2OIFVF3XAFYU1IPYUbi4NW72Bn7WfW9cyPKZEKZL6tdQ2dbpTZ1fFqmc6kg09zQbgG-loK-pu2GeNyJVXEZEWbXRnSVYKJ6QGl5Acde_EPlxCWjfFxiKsCDj2CwQzmYk1KXRWZuCT4GywkA03hZzFmG2s8BVVu0sydTSd7YjsCqId8wwuMgaGJOXBN9SJbhH-kf8729E7lsIVy_3xkdl1fN2e--Rm5fE1_L4vpeyAaPQPxosmD3Wj5uchTHLwyPuY9QspLX_znVNFRu0M_B51I4Sa84wnFRLgnkLoes-7qva5r4EHYqy870qpfjH6ScZp97VFd7i0P9RXNUiWSN3V2pXoLOyfy3umHEny2wPH6X-kmRb2Skm_3LRekTYcL9kOyNfwCfz7I_P32CEoA-W4jlZhn35VTSGXVlSNIE-lmcUUP13X_5dRiuEiO11TPQSoZyb94MfWqYJYAE_AkT7Ly76ENkr_RCNMmXdQ6wng6hmOM9ZlgAMDJ3MfjXoo2PLD_19lzRlsPNK5LvKepFR4TadqxflYD4WN5dMN_maDvIr0HGMdJvNUvJRCw2bGJIKrq6eiN2D2qg6u_VHEWal3bRApKWDl8o9D3lnG_8Q5Q3NfarArVLMowWCXrPmauq3v02dyGKV5KHE0oFWjsVzXjZrq21D02-78xvRlStkK1u4kJC0c5RH-ypG70ES0RD3t9v-999gk1MgMOo6A2Bwf0VOCT-R-MjJV4DAUjb5GnJ8r5SRWpBW6GMJMtdpfV3X5h19NNvGtnyy2E6e77dvQthTUFszBSXBFpfMYz4kSw5gUd31W_ifDT0tB7nQc1cmpAaWBZNFwQiJB6_FQiccuOzQvpzECS0zzXHMw5b29PuS8E-hGasBHHPq_rZAoIreAVYH1JDxQCBYnpvcfX7KAIFwOYQ-hJQhAfHMPFHnGJrKfQiuGT_4KhTThaKNz8HydTIareSihIiHQKkIdQiMgcJqXIbSzHzVSaK4MCs5cOrpktfjfh-OByjpqim5XTmVWXqb92DzMmqCuMWUy_cpNWp9ucFuN4d8u_hCzKonVW6k1dVNF91IP7j6aWS2P3xp9wW0YxY0ReAjjvovCvgRy-NNWSX4w3PZvJdI5Gmn_iUit1S2znsc_GrzkkzMo4PCgGkya38K26Q5zc9Ji08IyA7iQk5eNHxpMeX7DFrjJjq2ThLu1qSmj7CCq3D8OyVPqc5Gov_jYZZa2r4hjEM4a7pOsiBq6CpUSLcLTvo87WwjslJW_jZdyHMgg8EiEN0rjmt0GhdYe19Omq8hODYoqKagL-sSa71fl54G-z2YPUJJiqfE3D8wjqXpfvoZJJ-Ix75HwcpA5NMu35_zdD9MvoKvT2sqbLnOhewWC2h3y0bl6XILp1imLFZWPbfJJAj26mLb__DiXx-lotR8bOmz3hjd8SnmrunoiAbVDRgrG-8iDaSfTwMgXSi-EeaxWqP1UTUagUoERhG6eViN4In3p83cb4ylbQBFM5o8TS8fAC5n-k_JbIyVTmqGiQoUwvZTmLEGEqhXdJgMvc1FvBbbsE7gbhIGpqe3JY_pgfyZcAdTxCorikqzUH98M8K0-n21X6ZXt3JczUPpQ-RQVEcZkQZVM1k8FFgfW49zbAtyJnFXmOlmlBodtBA5XdmAVTP0SgdFS3XIuuhmcPRf-LKnzkYH0QzyBfF3ndMPk-ZPZxf-yJ1H2qWxxKBWhUOkTI-exfuU_rZw6dJ5EDuSCL5xIjJIpTMXCuJb6f6Mkm15IQajldP4AsU6NlMl_VawInHfU16PTm7mwXKrb5IkhAeVHGMNB8MBdjNaqEdEzMyKmHXQIos42iqA4Wwbqm93d__wax8uy8A8cDaRBa9uCvrPXhUYoOUMLpaAWbPBfsouWaBJxEcHE2oN8ghBYfGzIBuDf7CLM8pTu1M_x5XI31rV3wz1M-WXVG_YTFk6BbApLooTrksqJh3xPjxrB4w8jXSK7QEKypLXqTxitZfah0Mgwi-vPMUFj_Hh3CoDlR1SHbRN3HTPyEtQL71bxp0e7Ew7pT3w3bEJxf_l4wdQXLn8Wry3-7-qMAAC9PpQyoC4YEBm0NqgxDreptQSgGMVkf2nIQ2xcRw48HTDrA5Rf3Eg9gjSOGNOZ9kmpQSUQIWJM8XJsTRulTkh9FSP6Z1Un4I87ivh4_d-kJcUfiupRg7VCsnq0XRXjW2FuydqZvimQSP88azPtMXe68sEDywKKfdTs0-UPMOW_vflBH_VzyQXZfz2qY6pduMpy8ko4qEBqigPanBi41-YzN-NrY5i_UhN7ASlzJ4QsjB11sp62cJn32ywserIYW2WyRghZXxZLd9g4LeScVY3APTtLNVwNpexcRyAHlJQyHbNalZXshoRR8XtT6ba8ngep6ihRQaeJxgZ0bYjpMjuby2pAtMFym4mQhFccCSWPA6ycLP5-QS8VZ_Tp8klze9dkv5qL5DFiNrjMCXcUuLvsIijcuRI9mpxd4G3dv4g=="
encrypted_timestamp = b"gAAAAABn7Djrmr_IJiSLuvhlbbJvYXIHFAikQpJ3MepGIdo96tJ1BYv3f1JzZxR99DykUvOsI1ZxFcoJqB1Y_G9PPrTon1FAy1ZwSnGBJXeiS9Y4afbLnpw="

# Descifrar cada campo por separado
try:
    geolocalizacion = cipher.decrypt(encrypted_geolocalizacion).decode("utf-8")
    imagen = cipher.decrypt(encrypted_imagen).decode("utf-8")
    timestamp = cipher.decrypt(encrypted_timestamp).decode("utf-8")

    print("Datos descifrados:")
    print(f"Geolocalizaci√≥n: {geolocalizacion}")
    print(f"Imagen: {imagen}")
    print(f"Timestamp: {timestamp}")

except Exception as e:
    print(f"Error al descifrar los datos: {e}")
